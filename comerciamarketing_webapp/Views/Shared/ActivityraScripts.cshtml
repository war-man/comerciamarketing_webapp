
@{
    Layout = null;
}



<!--SCRIPT FORM_TEMPLATE SAVE-->
<script>



    (function ($) {
        showSuccessToast = function () {
            'use strict';
            resetToastPosition();
            $.toast({
                heading: 'Success',
                text: 'Data saved.',
                showHideTransition: 'slide',
                icon: 'success',
                loaderBg: '#f96868',
                position: 'top-right'
            })
        };

        showWarning2Toast = function () {
            'use strict';
            resetToastPosition();
            $.toast({
                heading: 'Warning',
                text: 'Something wrong happened, try again.',
                showHideTransition: 'slide',
                icon: 'warning',
                loaderBg: '#ff9900',
                position: 'top-right'
            })
        };

        resetToastPosition = function () {
            $('.jq-toast-wrap').removeClass('bottom-left bottom-right top-left top-right mid-center'); // to remove previous position class
            $(".jq-toast-wrap").css({
                "top": "",
                "left": "",
                "bottom": "",
                "right": ""
            }); //to remove previous position style
        }
    })(jQuery);
    function isOnLine() {
        return navigator.onLine;
    }

    $(function () {
        $("#save_activity").click(function () {

            initGeolocation();

        }
        );
    });
    var options = {
        enableHighAccuracy: true,
        timeout: 5000,
        maximumAge: 0
    };

    function success(pos) {
        var crd = pos.coords;
        $("#loading").show();

        var lat = crd.latitude;
        var lng = crd.longitude;

        var idvisita = "";
        idvisita = document.getElementById('idvisita').value;


        //GUARDAMOS OBJETOS

        var objects = [];

        //$.each($('input.form-control[type = "text"]'), function () {

        //    //alert("ID:" + $(this).attr('id') + "value: " + $(this).val());

        //    objects.push({
        //        id: $(this).attr('id'),
        //        value: $(this).val(),
        //        text: ""
        //    });


        //});

        $.each($('input.form-control[type = "number"]'), function () {


            //objects.push({
            //    id: $(this).attr('id'),
            //    value: $(this).val(),
            //    text: ""
            //});

            if ($(this).val() != "" || $(this).val() != null) {
                if ($(this).val() > 0) {
                    //Agregamos la propiedad

                    $(this).closest('.tr').addClass('border-success');
                    $(this).closest('.tr').find('.icondiv').addClass('mdi icon-sm text-success mdi-check-all');

                } else {
                    //Quitamos la propiedad

                    $(this).closest('.tr').removeClass('border-success');
                    $(this).closest('.tr').find('.icondiv').removeClass('mdi icon-sm text-success mdi-check-all');
                }
            }

        });

        //var canvas = document.getElementById("sig-canvas");
        $.each($('canvas'), function () {
            var canvas = document.getElementById($(this).attr("id"));
            var dataUrl = canvas.toDataURL();
            //alert(dataUrl);

            objects.push({
                id: $(this).attr("data-id"),
                value: dataUrl,
                text: ""
            });
        });


        //$.each(objects, function (propName, propVal) {
        //    console.log(propName, propVal);
        //});
        if (isOnLine()) {
                //En toda accion de guardar, primero siempre ira al localstorage como update y luego al server
            //Guardamos en local
            var retrievedArrayF = JSON.parse(localStorage.getItem('FormsM_details'));
            //filtramos por actividad ((NO SE PUEDE FILTRAR PORQUE SINO, BORRAMOS TODO EL CACHE AL SOBREESCRIBIRLO))
             //= retrievedArrayfi.filter(item => item.ID_visit === idVisita);

            var idVisita = @ViewBag.idvisita;
            var item;

            //Creamos un metodo diferente para recorrer los elementos ya que hay objetos child
            //los cuales no se pueden solo mandar a llamar, sino que hay que recorrerlos
            function deepSearch(container, idkey, value, text) {

                for (var i = 0; i < container.length; i++) {
                    var objeto = container[i];
                    if (objeto.ID_visit == idVisita && objeto.idkey == idkey) {
                        //Lo encontro en los parent y actualizaremos
                        item = objeto;
                        //Una vez encontrado,actualizamos lo que necesitamos y cambiamos el estado.
                        item.onserver = false;
                        if (objeto.resourcetype == 9) {//Si es firma
                            if (value == "" || value == null) { value = ""; }
                            item.fsource = value; //Lo guardamos

                        } else if (objeto.resourcetype == 16) {
                            if (value == "" || value == null) { value = false; }
                            item.fvalue = value; //Lo guardamos
                        }
                        break;
                    } else { //no lo encontro pero verificaremos si tiene hijos para buscar nuevamente
                        if (objeto.children.length > 0) {
                            deepSearch(objeto.children, idkey, value, text);
                        }
                    }

                }

            }

            objects.forEach(function (element) {
                var id = element.id;
                var val = element.value;
                var txt = element.text;
                deepSearch(retrievedArrayF, id, val, txt);
            });

            localStorage.setItem('FormsM_details', JSON.stringify(retrievedArrayF));

            var now = new Date();
            var retrievedArrayA = JSON.parse(localStorage.getItem('activities'));
            retrievedArrayA.forEach(function (objeto) {
                if (objeto.ID_activity == idVisita) {
                    item = objeto;
                    //Una vez encontrado,actualizamos lo que necesitamos y cambiamos el estado.
                    item.onserver = false;
                    item.action = "update"
                    item.check_in = now.toLocaleString("en-US", { hour12: true });
                }

            });
            localStorage.setItem('activities', JSON.stringify(retrievedArrayA));


            //Guardamos en server

            $.ajax({
                url: '/FormsM/Save_activity',
                type: 'POST',
                data: { 'id': idVisita, 'objects': objects, 'lat': lat, 'lng': lng, 'check_in': now.toLocaleString("en-US", { hour12: true }) },
                cache: false,
                global: false,
                success: function (result) {

                    if (result.Result == "Success") {
                        $("#loading").hide();
                                    //Guardamos en local
            var retrievedArrayF = JSON.parse(localStorage.getItem('FormsM_details'));
            //filtramos por actividad ((NO SE PUEDE FILTRAR PORQUE SINO, BORRAMOS TODO EL CACHE AL SOBREESCRIBIRLO))
             //= retrievedArrayfi.filter(item => item.ID_visit === idVisita);

            var idVisita = @ViewBag.idvisita;
            var item;

            //Creamos un metodo diferente para recorrer los elementos ya que hay objetos child
            //los cuales no se pueden solo mandar a llamar, sino que hay que recorrerlos
            function deepSearch(container, idkey, value, text) {

                for (var i = 0; i < container.length; i++) {
                    var objeto = container[i];
                    if (objeto.ID_visit == idVisita && objeto.idkey == idkey) {
                        //Lo encontro en los parent y actualizaremos
                        item = objeto;
                            //Una vez encontrado,actualizamos lo que necesitamos y cambiamos el estado.
                            item.onserver = false;
                            item.action = "saved"
                  
                        break;
                    } else { //no lo encontro pero verificaremos si tiene hijos para buscar nuevamente
                        if (objeto.children.length > 0) {
                            deepSearch(objeto.children, idkey, value, text);
                        }
                    }

                }

            }

            objects.forEach(function (element) {
                var id = element.id;
                var val = element.value;
                var txt = element.text;
                deepSearch(retrievedArrayF, id, val, txt);
            });

            localStorage.setItem('FormsM_details', JSON.stringify(retrievedArrayF));

                        var now = new Date();
                        var retrievedArrayA = JSON.parse(localStorage.getItem('activities'));
                        retrievedArrayA.forEach(function (objeto) {
                            if (objeto.ID_activity == idVisita) {
                                item = objeto;
                                //Una vez encontrado,actualizamos lo que necesitamos y cambiamos el estado.
                                item.onserver = false;
                                item.action = "saved"
                                item.check_in = now.toLocaleString("en-US", { hour12: true });
                            }

                        });
                        localStorage.setItem('activities', JSON.stringify(retrievedArrayA));

                        showSuccessToast();

                        var x = document.getElementById("finish_activity");
                        if (x.style.display === "none") {
                            x.style.display = "inline-block";
                        } else {
                            x.style.display = "none";
                        }
                        //window.location.reload(true);

                        //window.location.reload(true);
                    } else {
                        $("#loading").hide();
                        showWarning2Toast();

                    }


                },
                error: function (request) {
                    $("#loading").hide();
                    showWarning2Toast();

                }
            });
        } else {
                //En toda accion de guardar, primero siempre ira al localstorage como update y luego al server
            //Guardamos en local
            var retrievedArrayF = JSON.parse(localStorage.getItem('FormsM_details'));
            //filtramos por actividad ((NO SE PUEDE FILTRAR PORQUE SINO, BORRAMOS TODO EL CACHE AL SOBREESCRIBIRLO))
             //= retrievedArrayfi.filter(item => item.ID_visit === idVisita);

            var idVisita = @ViewBag.idvisita;
            var item;

            //Creamos un metodo diferente para recorrer los elementos ya que hay objetos child
            //los cuales no se pueden solo mandar a llamar, sino que hay que recorrerlos
            function deepSearch(container, idkey, value, text) {

                for (var i = 0; i < container.length; i++) {
                    var objeto = container[i];
                    if (objeto.ID_visit == idVisita && objeto.idkey == idkey) {
                        //Lo encontro en los parent y actualizaremos
                        item = objeto;
                        //Una vez encontrado,actualizamos lo que necesitamos y cambiamos el estado.
                        item.onserver = false;
                        if (objeto.resourcetype == 9) {//Si es firma
                            if (value == "" || value == null) { value = ""; }
                            item.fsource = value; //Lo guardamos

                        } else if (objeto.resourcetype == 16) {
                            if (value == "" || value == null) { value = false; }
                            item.fvalue = value; //Lo guardamos
                        }
                        break;
                    } else { //no lo encontro pero verificaremos si tiene hijos para buscar nuevamente
                        if (objeto.children.length > 0) {
                            deepSearch(objeto.children, idkey, value, text);
                        }
                    }

                }

            }

            objects.forEach(function (element) {
                var id = element.id;
                var val = element.value;
                var txt = element.text;
                deepSearch(retrievedArrayF, id, val, txt);
            });

            localStorage.setItem('FormsM_details', JSON.stringify(retrievedArrayF));

            var now = new Date();
            var retrievedArrayA = JSON.parse(localStorage.getItem('activities'));
            retrievedArrayA.forEach(function (objeto) {
                if (objeto.ID_activity == idVisita) {
                    item = objeto;
                    //Una vez encontrado,actualizamos lo que necesitamos y cambiamos el estado.
                    item.onserver = false;
                    item.action = "update"
                    item.check_in = now.toLocaleString("en-US", { hour12: true });
                }

            });
            localStorage.setItem('activities', JSON.stringify(retrievedArrayA));

            $("#loading").hide();
            showSuccessToast();

            var x = document.getElementById("finish_activity");
            if (x.style.display === "none") {
                x.style.display = "inline-block";
            } else {
                x.style.display = "none";
            }

        }




    };

    function error(err) {
        console.warn('ERROR(' + err.code + '): ' + err.message);
        $("#loading").show();
        var idvisita = "";
        idvisita = document.getElementById('idvisita').value;


        //GUARDAMOS OBJETOS

        var objects = [];

        //$.each($('input.form-control[type = "text"]'), function () {

        //    //alert("ID:" + $(this).attr('id') + "value: " + $(this).val());

        //    objects.push({
        //        id: $(this).attr('id'),
        //        value: $(this).val(),
        //        text: ""
        //    });


        //});

        $.each($('input.form-control[type = "number"]'), function () {


            //objects.push({
            //    id: $(this).attr('id'),
            //    value: $(this).val(),
            //    text: ""
            //});

            if ($(this).val() != "" || $(this).val() != null) {
                if ($(this).val() > 0) {
                    //Agregamos la propiedad

                    $(this).closest('.tr').addClass('border-success');
                    $(this).closest('.tr').find('.icondiv').addClass('mdi icon-sm text-success mdi-check-all');

                } else {
                    //Quitamos la propiedad

                    $(this).closest('.tr').removeClass('border-success');

                    $(this).closest('.tr').find('.icondiv').removeClass('mdi icon-sm text-success mdi-check-all');
                }
            }

        });

        //var canvas = document.getElementById("sig-canvas");
        $.each($('canvas'), function () {
            var canvas = document.getElementById($(this).attr("id"));
            var dataUrl = canvas.toDataURL();
            //alert(dataUrl);

            objects.push({
                id: $(this).attr("data-id"),
                value: dataUrl,
                text: ""
            });
        });

        //$.each(objects, function (propName, propVal) {
        //    console.log(propName, propVal);
        //});

        if (isOnLine()) {
                //En toda accion de guardar, primero siempre ira al localstorage como update y luego al server
            //Guardamos en local
            var retrievedArrayF = JSON.parse(localStorage.getItem('FormsM_details'));
            //filtramos por actividad ((NO SE PUEDE FILTRAR PORQUE SINO, BORRAMOS TODO EL CACHE AL SOBREESCRIBIRLO))
             //= retrievedArrayfi.filter(item => item.ID_visit === idVisita);

            var idVisita = @ViewBag.idvisita;
            var item;

            //Creamos un metodo diferente para recorrer los elementos ya que hay objetos child
            //los cuales no se pueden solo mandar a llamar, sino que hay que recorrerlos
            function deepSearch(container, idkey, value, text) {

                for (var i = 0; i < container.length; i++) {
                    var objeto = container[i];
                    if (objeto.ID_visit == idVisita && objeto.idkey == idkey) {
                        //Lo encontro en los parent y actualizaremos
                        item = objeto;
                        //Una vez encontrado,actualizamos lo que necesitamos y cambiamos el estado.
                        item.onserver = false;
                        if (objeto.resourcetype == 9) {//Si es firma
                            if (value == "" || value == null) { value = ""; }
                            item.fsource = value; //Lo guardamos

                        } else if (objeto.resourcetype == 16) {
                            if (value == "" || value == null) { value = false; }
                            item.fvalue = value; //Lo guardamos
                        }
                        break;
                    } else { //no lo encontro pero verificaremos si tiene hijos para buscar nuevamente
                        if (objeto.children.length > 0) {
                            deepSearch(objeto.children, idkey, value, text);
                        }
                    }

                }

            }

            objects.forEach(function (element) {
                var id = element.id;
                var val = element.value;
                var txt = element.text;
                deepSearch(retrievedArrayF, id, val, txt);
            });

            localStorage.setItem('FormsM_details', JSON.stringify(retrievedArrayF));

            var now = new Date();
            var retrievedArrayA = JSON.parse(localStorage.getItem('activities'));
            retrievedArrayA.forEach(function (objeto) {
                if (objeto.ID_activity == idVisita) {
                    item = objeto;
                    //Una vez encontrado,actualizamos lo que necesitamos y cambiamos el estado.
                    item.onserver = false;
                    item.action = "update"
                    item.check_in = now.toLocaleString("en-US", { hour12: true });
                }

            });
            localStorage.setItem('activities', JSON.stringify(retrievedArrayA));

            //Guardamos en server
            $.ajax({
                url: '/FormsM/Save_activity',
                type: 'POST',
                data: { 'id': idVisita, 'objects': objects, 'lat': "", 'lng': "", 'check_in': now.toLocaleString("en-US", { hour12: true }) },
                cache: false,
                global: false,
                success: function (result) {

                    if (result.Result == "Success") {
                        $("#loading").hide();
                                    //Guardamos en local
            var retrievedArrayF = JSON.parse(localStorage.getItem('FormsM_details'));
            //filtramos por actividad ((NO SE PUEDE FILTRAR PORQUE SINO, BORRAMOS TODO EL CACHE AL SOBREESCRIBIRLO))
             //= retrievedArrayfi.filter(item => item.ID_visit === idVisita);

            var idVisita = @ViewBag.idvisita;
            var item;

            //Creamos un metodo diferente para recorrer los elementos ya que hay objetos child
            //los cuales no se pueden solo mandar a llamar, sino que hay que recorrerlos
            function deepSearch(container, idkey, value, text) {

                for (var i = 0; i < container.length; i++) {
                    var objeto = container[i];
                    if (objeto.ID_visit == idVisita && objeto.idkey == idkey) {
                        //Lo encontro en los parent y actualizaremos
                        item = objeto;
                            //Una vez encontrado,actualizamos lo que necesitamos y cambiamos el estado.
                            item.onserver = false;
                            item.action = "saved"
                  
                        break;
                    } else { //no lo encontro pero verificaremos si tiene hijos para buscar nuevamente
                        if (objeto.children.length > 0) {
                            deepSearch(objeto.children, idkey, value, text);
                        }
                    }

                }

            }

            objects.forEach(function (element) {
                var id = element.id;
                var val = element.value;
                var txt = element.text;
                deepSearch(retrievedArrayF, id, val, txt);
            });

            localStorage.setItem('FormsM_details', JSON.stringify(retrievedArrayF));
                        var now = new Date();
                        var retrievedArrayA = JSON.parse(localStorage.getItem('activities'));
                        retrievedArrayA.forEach(function (objeto) {
                            if (objeto.ID_activity == idVisita) {
                                item = objeto;
                                //Una vez encontrado,actualizamos lo que necesitamos y cambiamos el estado.
                                item.onserver = false;
                                item.action = "saved"
                                item.check_in = now.toLocaleString("en-US", { hour12: true });
                            }

                        });
                        localStorage.setItem('activities', JSON.stringify(retrievedArrayA));

                        showSuccessToast();

                        var x = document.getElementById("finish_activity");
                        if (x.style.display === "none") {
                            x.style.display = "inline-block";
                        } else {
                            x.style.display = "none";
                        }
                        //window.location.reload(true);

                        //window.location.reload(true);
                    } else {
                        $("#loading").hide();
                        showWarning2Toast();

                    }


                },
                error: function (request) {
                    $("#loading").hide();
                    showWarning2Toast();

                }
            });
        } else {
                //En toda accion de guardar, primero siempre ira al localstorage como update y luego al server
            //Guardamos en local
            var retrievedArrayF = JSON.parse(localStorage.getItem('FormsM_details'));
            //filtramos por actividad ((NO SE PUEDE FILTRAR PORQUE SINO, BORRAMOS TODO EL CACHE AL SOBREESCRIBIRLO))
             //= retrievedArrayfi.filter(item => item.ID_visit === idVisita);

            var idVisita = @ViewBag.idvisita;
            var item;

            //Creamos un metodo diferente para recorrer los elementos ya que hay objetos child
            //los cuales no se pueden solo mandar a llamar, sino que hay que recorrerlos
            function deepSearch(container, idkey, value, text) {

                for (var i = 0; i < container.length; i++) {
                    var objeto = container[i];
                    if (objeto.ID_visit == idVisita && objeto.idkey == idkey) {
                        //Lo encontro en los parent y actualizaremos
                        item = objeto;
                        //Una vez encontrado,actualizamos lo que necesitamos y cambiamos el estado.
                        item.onserver = false;
                        if (objeto.resourcetype == 9) {//Si es firma
                            if (value == "" || value == null) { value = ""; }
                            item.fsource = value; //Lo guardamos

                        } else if (objeto.resourcetype == 16) {
                            if (value == "" || value == null) { value = false; }
                            item.fvalue = value; //Lo guardamos
                        }
                        break;
                    } else { //no lo encontro pero verificaremos si tiene hijos para buscar nuevamente
                        if (objeto.children.length > 0) {
                            deepSearch(objeto.children, idkey, value, text);
                        }
                    }

                }

            }

            objects.forEach(function (element) {
                var id = element.id;
                var val = element.value;
                var txt = element.text;
                deepSearch(retrievedArrayF, id, val, txt);
            });

            localStorage.setItem('FormsM_details', JSON.stringify(retrievedArrayF));

            var now = new Date();
            var retrievedArrayA = JSON.parse(localStorage.getItem('activities'));
            retrievedArrayA.forEach(function (objeto) {
                if (objeto.ID_activity == idVisita) {
                    item = objeto;
                    //Una vez encontrado,actualizamos lo que necesitamos y cambiamos el estado.
                    item.onserver = false;
                    item.action = "update"
                    item.check_in = now.toLocaleString("en-US", { hour12: true });
                }

            });
            localStorage.setItem('activities', JSON.stringify(retrievedArrayA));

            $("#loading").hide();
            showSuccessToast();

            var x = document.getElementById("finish_activity");
            if (x.style.display === "none") {
                x.style.display = "inline-block";
            } else {
                x.style.display = "none";
            }

        }
    };

    function initGeolocation() {
        if (navigator && navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(success, error, options);
        } else {
            console.log('Geolocation is not supported');
        }
    }
</script>
<script>
    function selectTest(ID) {
        document.getElementById(ID).setAttribute('type', 'text');
        document.getElementById(ID).selectionStart = 0
        document.getElementById(ID).selectionEnd = 999
        document.getElementById(ID).setAttribute('type', 'number');
    };
</script>
<script>
//FINISH TEMPLATE
    function isOnLine() {
        return navigator.onLine;
    }
    $(function () {
        $("#finish_activity").click(function () {
            var flag = true;


            $.each($('input.form-control[type = "text"]'), function () {

                //if ($(this).val() == "" || $(this).val() == null) {
                //    flag = false;
                //    $(this).addClass("border-danger");
                //}
            });

            $.each($('input.form-control[type = "number"]'), function () {
                //se quito para ayudar a los mercaderistas
                //if ($(this).val() == "" || $(this).val() == null) {
                //    flag = false;
                //    $(this).addClass("border-danger");

                //}
            });

            $.each($('input.form-check-input[type = "radio"]'), function () {


            });

            $.each($('input.form-check-input[type = "checkbox"]'), function () {

            });

            $.each($('input.dropifyIMG[type = "file"]'), function () {

            });



            $.each($('textarea.form-control'), function () {


                //if ($(this).val() == "" || $(this).val() == null) {
                //    flag = false;
                //    $(this).addClass("border-danger");
                //}


            });

            $.each($('select'), function () {


                //if ($(this).val() == "0" || $(this).val() == null) {
                //    flag = false;
                //    $(this).addClass("border-danger");
                //}


            });

            //var canvas = document.getElementById("sig-canvas");
            $.each($('canvas'), function () {

            });

            if (flag == true) {
                initGeolocation2();
            } else {
                $("#loading").hide();

                var x = document.getElementById("finish_activity");
                x.style.display = "none";
                //Alerta de que no se han guardado los campos obligatorios
                $.toast({
                    heading: 'Warning',
                    text: 'Please fill in all required fields (*) in this form',
                    loader: false,        // Change it to false to disable loader
                    showHideTransition: 'slide',
                    icon: 'warning',
                    loaderBg: '#ff9900',
                    hideAfter: 5000,
                    position: 'top-right'
                });







            }


        }
        );
    });//end










    var options2 = {
        enableHighAccuracy: true,
        timeout: 5000,
        maximumAge: 0
    };

    function success2(pos) {
        var crd = pos.coords;
        $("#loading").show();

        var lat = crd.latitude;
        var lng = crd.longitude;

        var idvisita = "";
        idvisita = document.getElementById('idvisita').value;

        if (isOnLine()) {
            var now = new Date();
            var retrievedArrayA = JSON.parse(localStorage.getItem('activities'));
            retrievedArrayA.forEach(function (objeto) {
                if (objeto.ID_activity == idvisita) {
                    item = objeto;
                    //Una vez encontrado,actualizamos lo que necesitamos y cambiamos el estado.
                    item.onserver = false;
                    item.action = "update"
                    item.isfinished = true;
                    item.check_out = now.toLocaleString("en-US", { hour12: true });
                }

            });
            localStorage.setItem('activities', JSON.stringify(retrievedArrayA));

        
        $.ajax({
            url: '/FormsM/Finish_activity',
            type: 'POST',
            data: { 'id': idvisita, 'lat': lat, 'lng': lng, 'check_out': now.toLocaleString("en-US", { hour12: true }) },
            complete: function () {

            },
            success: function (result) {

                 var url = '@Url.Action("Details", "VisitsMs", new {id= ViewBag.idvisitareal })';
                $("#loading").hide();

              
                var retrievedArrayA = JSON.parse(localStorage.getItem('activities'));
                retrievedArrayA.forEach(function (objeto) {
                    if (objeto.ID_activity == idvisita) {
                        item = objeto;
                        //Una vez encontrado,actualizamos lo que necesitamos y cambiamos el estado.
                        item.onserver = false;
                        item.action = "saved"
                    }

                });
                localStorage.setItem('activities', JSON.stringify(retrievedArrayA));

                    window.location.href = url;

            },
            error: function (request) {

                $("#loading").hide();
                window.location.reload(true);
            }
        });

        } else {
            var now = new Date();
            var retrievedArrayA = JSON.parse(localStorage.getItem('activities'));
            retrievedArrayA.forEach(function (objeto) {
                if (objeto.ID_activity == idvisita) {
                    item = objeto;
                    //Una vez encontrado,actualizamos lo que necesitamos y cambiamos el estado.
                    item.onserver = false;
                    item.action = "update"
                    item.isfinished = true;
                    item.check_out = now.toLocaleString("en-US", { hour12: true });
                }

            });
            localStorage.setItem('activities', JSON.stringify(retrievedArrayA));
                         var url = '@Url.Action("Details", "VisitsMs", new {id= ViewBag.idvisitareal })';
            $("#loading").hide();
            window.location.href = url;
        }
    };

    function error2(err) {
        console.warn('ERROR(' + err.code + '): ' + err.message);
        $("#loading").show();
        var idvisita = "";
        idvisita = document.getElementById('idvisita').value;

        if (isOnLine()) {
            var now = new Date();
            var retrievedArrayA = JSON.parse(localStorage.getItem('activities'));
            retrievedArrayA.forEach(function (objeto) {
                if (objeto.ID_activity == idvisita) {
                    item = objeto;
                    //Una vez encontrado,actualizamos lo que necesitamos y cambiamos el estado.
                    item.onserver = false;
                    item.action = "update"
                    item.isfinished = true;
                    item.check_out = now.toLocaleString("en-US", { hour12: true });
                }

            });
            localStorage.setItem('activities', JSON.stringify(retrievedArrayA));

        
        $.ajax({
            url: '/FormsM/Finish_activity',
            type: 'POST',
            data: { 'id': idvisita, 'lat': "", 'lng': "", 'check_out': now.toLocaleString("en-US", { hour12: true }) },
            complete: function () {

            },
            success: function (result) {

                 var url = '@Url.Action("Details", "VisitsMs", new {id= ViewBag.idvisitareal })';
                $("#loading").hide();

              
                var retrievedArrayA = JSON.parse(localStorage.getItem('activities'));
                retrievedArrayA.forEach(function (objeto) {
                    if (objeto.ID_activity == idvisita) {
                        item = objeto;
                        //Una vez encontrado,actualizamos lo que necesitamos y cambiamos el estado.
                        item.onserver = false;
                        item.action = "saved"
                    }

                });
                localStorage.setItem('activities', JSON.stringify(retrievedArrayA));

                    window.location.href = url;

            },
            error: function (request) {

                $("#loading").hide();
                window.location.reload(true);
            }
        });

        } else {
            var now = new Date();
            var retrievedArrayA = JSON.parse(localStorage.getItem('activities'));
            retrievedArrayA.forEach(function (objeto) {
                if (objeto.ID_activity == idvisita) {
                    item = objeto;
                    //Una vez encontrado,actualizamos lo que necesitamos y cambiamos el estado.
                    item.onserver = false;
                    item.action = "update"
                    item.isfinished = true;
                    item.check_out = now.toLocaleString("en-US", { hour12: true });
                }

            });
            localStorage.setItem('activities', JSON.stringify(retrievedArrayA));
             var url = '@Url.Action("Details", "VisitsMs", new {id= ViewBag.idvisitareal })';
            $("#loading").hide();
            window.location.href = url;
        }
    };



    function initGeolocation2() {
        if (navigator && navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(success2, error2, options2);
        } else {
            console.log('Geolocation is not supported');
        }
    }


</script>


<!--***********SCRIPT PARA ORDENAMIENTO DE ITEMS***********-->
<script>
    function OrderedList(parentList,main_container, parent = 0, selectid="") {
        //#main_container es el contenedor principal donde se estructuran los div principales
        parentList.forEach(function (objeto) {
            //< !--PARA TITULOS-- >
            if (objeto.id_resource == 1) {
                $("" + main_container + "").append('<div class="row" id="main_container_child' + objeto.idkey + '">');
                $("#main_container_child" + objeto.idkey + "").append('<hr />');
                $("#main_container_child" + objeto.idkey + "").append('<div class="form-horizontal" id="main_container_subchild' + objeto.idkey + '">');
                $("#main_container_subchild" + objeto.idkey + "").append('<hr />');
                $("#main_container_subchild" + objeto.idkey + "").append('<h5 class="display-4 text-warning" style="text-align:center;">' + objeto.fsource + '</h5>');
                $("#main_container_subchild" + objeto.idkey + "").append('<hr />');
                $("#main_container_child" + objeto.idkey + "").append('</div>');
                $("#main_container_child" + objeto.idkey + "").append('<hr />');
                $("" + main_container + "").append('</div>');

            }

        });
    };

    function OrderedListHeadertable(parentList, main_container, parent = 0, selectid = "") {
        //#main_container es el contenedor principal donde se estructuran los div principales
        parentList.forEach(function (objeto) {
            //< !--PARA TITULOS-- >
            if (objeto.id_resource == 24) {
                $("" + main_container + "").append('<div class="th">' + objeto.fdescription + '</div>');
            }

        });
    };

    function OrderedListRetail(parentList, main_container, parent = 0, selectid = "") {
        //#main_container es el contenedor principal donde se estructuran los div principales
        parentList.forEach(function (objeto) {

            // <!--PARA PRODUCTOS -->
            if (objeto.id_resource == 3) {
                $("" + main_container + "").append('<div class="tr" id="main_container_child' + objeto.idkey + '">');
                $("#main_container_child" + objeto.idkey + "").append('<div class="td accordion-xs-toggle"><small>' + objeto.fdescription + '</small><div class="icondiv"></div></div>');
                if (objeto.children.length > 0)
                {
                    $("#main_container_child" + objeto.idkey + "").append('<div id="main_container_subchild' + objeto.idkey + '" class="accordion-xs-collapse"></div></div>');
                    $("#main_container_subchild" + objeto.idkey + "").append('<div class="inner" id="main_container_subsubchild' + objeto.idkey + '">');

                    OrderedListRetail(objeto.children, "#main_container_subsubchild" + objeto.idkey + "", objeto.idkey)

                    $("#main_container_subchild" + objeto.idkey + "").append('</div>');
                    $("#main_container_child" + objeto.idkey + "").append('</div>');
                    $("" + main_container + "").append('</div>');
                }
            }
            ////<!--CHECK SELECCION MULTIPLE -->
            if (objeto.id_resource == 16) {
                if (objeto.parent != 0) {
                    $("" + main_container + "").append('<div class="td" id="main_container_child' + objeto.idkey + '">');
                    $("#main_container_child" + objeto.idkey + "").append('<div class="form-check" id="main_container_subchild' + objeto.idkey + '">');
                    $("#main_container_subchild" + objeto.idkey + "").append('<label class="form-check-label" id="label_container' + objeto.idkey + '" >');

                    if (objeto.fvalue == 0) {
                        $("#label_container" + objeto.idkey + "").append('<input type="checkbox" class="form-check-input" name="radio_' + objeto.parent + '" id="' + objeto.idkey + '">');
                        $("#label_container" + objeto.idkey + "").append('' + objeto.fdescription + '');
                        $("#label_container" + objeto.idkey + "").append('<i class="input-helper"></i>');
                    }
                    else {
                        $("#label_container" + objeto.idkey + "").append('<input type="checkbox" class="form-check-input" name="radio_' + objeto.parent + '" id="' + objeto.idkey + '" checked>');
                        $("#label_container" + objeto.idkey + "").append('' + objeto.fdescription + '');
                        $("#label_container" + objeto.idkey + "").append('<i class="input-helper"></i>');
                    }

                    $("#main_container_subchild" + objeto.idkey + "").append('</label>');
                    $("#main_container_child" + objeto.idkey + "").append('</div>');
                    $("" + main_container + "").append('</div>');
                }
            }

            //<!--PARA INPUT NUMBER -->
            if (objeto.id_resource == 18) {
                if (objeto.parent != 0) {
                    $("" + main_container + "").append('<div class="td" id="main_container_child' + objeto.idkey + '">');
                    $("#main_container_child" + objeto.idkey + "").append('<div class="form-group" id="main_container_subchild' + objeto.idkey + '">');

                    if (objeto.fvalueDecimal > 0)

                    {
                        $("#main_container_subchild" + objeto.idkey + "").append('<input type="number" onClick="selectTest(this.id);" id="' + objeto.idkey + '" class="form-control form-control-sm" value="' + objeto.fvalueDecimal + '" />');
                    }

                    else {
                        $("#main_container_subchild" + objeto.idkey + "").append('<input type="number" onClick="selectTest(this.id);" id="' + objeto.idkey + '" class="form-control form-control-sm" value="" />');
                    }
                    $("#main_container_subchild" + objeto.idkey + "").append('' + objeto.fdescription + '');
                    $("#main_container_child" + objeto.idkey + "").append('</div>');
                    $("" + main_container + "").append('</div>');
                }
                else {
                }
            }
            //<!--PARA INPUT NUMBER (CURRENCY)-->
            if (objeto.id_resource == 21) {
                if (objeto.parent != 0) {
                    $("" + main_container + "").append('<div class="td" id="main_container_child' + objeto.idkey + '">');
                    $("#main_container_child" + objeto.idkey + "").append('<div class="form-group" id="main_container_subchild' + objeto.idkey + '">');
                    $("#main_container_subchild" + objeto.idkey + "").append('<label>' + objeto.fdescription + '</label>');
                    $("#main_container_subchild" + objeto.idkey + "").append('<div class="input-group" id="main_container_subsubchild' + objeto.idkey + '">');
                    $("#main_container_subsubchild" + objeto.idkey + "").append('<div class="input-group-prepend" id="main_container_subsubsubchild' + objeto.idkey + '">');
                    $("#main_container_subsubsubchild" + objeto.idkey + "").append('<span class="input-group-text">$</span>');
                    $("#main_container_subsubchild" + objeto.idkey + "").append('</div>');

                    if (objeto.fvalueDecimal > 0)
                    {
                        $("#main_container_subsubchild" + objeto.idkey + "").append('<input type="number" onClick="selectTest(this.id);" id="' + objeto.idkey + '" class="form-control" value="' + objeto.fvalueDecimal + '" />');
                    }
                    else
                    {
                        $("#main_container_subsubchild" + objeto.idkey + "").append('<input type="number" onClick="selectTest(this.id);" id="' + objeto.idkey + '" class="form-control" value="" />');
                    }

                    $("#main_container_subchild" + objeto.idkey + "").append('</div>');
                    $("#main_container_child" + objeto.idkey + "").append('</div>');
                    $("" + main_container + "").append('</div>');
                }
                else {
                }
            }


            //< !--PARA INPUT TEXT-- >
            if (objeto.id_resource == 6) {
                if (objeto.parent != 0) {
                    $("" + main_container + "").append('<div class="td" id="main_container_child' + objeto.idkey + '">');
                    $("#main_container_child" + objeto.idkey + "").append('<div class="form-group" id="main_container_subchild' + objeto.idkey + '">');
                    $("#main_container_subchild" + objeto.idkey + "").append('<div class="col-md-12" id="main_container_subsubchild' + objeto.idkey + '">');
                    $("#main_container_subsubchild" + objeto.idkey + "").append('<input type="text" id="' + objeto.idkey + '" class="form-control" />');
                    $("#main_container_subchild" + objeto.idkey + "").append('</div>');
                    $("#main_container_child" + objeto.idkey + "").append('</div>');
                    $("" + main_container + "").append('</div>');
                }
                else {
                }
        }

        });
    };

    function check_valid_inputs() {

        $.each($('input.form-control[type = "number"]'), function () {

            if ($(this).val() != "" || $(this).val() != null) {
                if ($(this).val() > 0) {
                    //Agregamos la propiedad

                    $(this).closest('.tr').addClass('border-success');
                    $(this).closest('.tr').find('.icondiv').addClass('mdi icon-sm text-success mdi-check-all');

                } else {
                    //Quitamos la propiedad

                    $(this).closest('.tr').removeClass('border-success');
                    $(this).closest('.tr').find('.icondiv').remove('mdi icon-sm text-success mdi-check-all');
                }
            }

        });
    };

        $(document).ready(function () {
            //Select a localstorage, buscando ID de actividad
            var idActividad = @ViewBag.idvisita;

            var retrievedArrayF = JSON.parse(localStorage.getItem('FormsM_details'));

            //Filtramos por actividad
            var resultado = retrievedArrayF.filter(item => item.ID_visit === idActividad);

            //Colocamos primero los titulos
            OrderedList(resultado, "#titles_div");
            //Luego las columnas
            OrderedListHeadertable(resultado, "#headings_table");
            //Luego los datos
            OrderedListRetail(resultado, "#rows_table");

            check_valid_inputs();


            $(function () {
                var isXS = false,
                    $accordionXSCollapse = $('.accordion-xs-collapse');

                // Window resize event (debounced)
                var timer;
                $(window).resize(function () {
                    if (timer) { clearTimeout(timer); }
                    timer = setTimeout(function () {
                        isXS = Modernizr.mq('only screen and (max-width: 1767px)');

                        // Add/remove collapse class as needed
                        if (isXS) {
                            $accordionXSCollapse.addClass('collapse');
                        } else {
                            $accordionXSCollapse.removeClass('collapse');
                        }
                    }, 100);
                }).trigger('resize'); //trigger window resize on pageload

                // Initialise the Bootstrap Collapse
                $accordionXSCollapse.each(function () {
                    $(this).collapse({ toggle: false });
                });

                // <a href="https://www.jqueryscript.net/accordion/">Accordion</a> toggle click event (live)
                $(document).on('click', '.accordion-xs-toggle', function (e) {
                    e.preventDefault();

                    var $thisToggle = $(this),
                        $targetRow = $thisToggle.parent('.tr'),
                        $targetCollapse = $targetRow.find('.accordion-xs-collapse');

                    if (isXS && $targetCollapse.length) {
                        var $siblingRow = $targetRow.siblings('.tr'),
                            $siblingToggle = $siblingRow.find('.accordion-xs-toggle'),
                            $siblingCollapse = $siblingRow.find('.accordion-xs-collapse');

                        $targetCollapse.collapse('toggle'); //toggle this collapse
                        $siblingCollapse.collapse('hide'); //close siblings

                        $thisToggle.toggleClass('collapsed'); //class used for icon marker
                        $siblingToggle.removeClass('collapsed'); //remove sibling marker class
                    }
                });
            });

            });



</script>

<!--GUARDAR OBJETOS POR SEPARADO-->
<script type="text/javascript">
    function isOnLine() {
        return navigator.onLine;
    }

    $(document).on('focusout', 'input.form-control[type="text"]', function () {
        $("#loading").hide();
        var idvisita = "";
        idvisita = document.getElementById('idvisita').value; //actividad
        //GUARDAMOS OBJETOS
        var objects = [];
        //alert("ID:" + $(this).attr('id') + "value: " + $(this).val());

        objects.push({
            id: $(this).attr('id'),
            value: $(this).val(),
            text: ""
        });

        if (isOnLine()) {

//En toda accion de guardar, primero siempre ira al localstorage como update y luego al server
            //Guardamos en local
            var retrievedArrayF = JSON.parse(localStorage.getItem('FormsM_details'));
            //filtramos por actividad ((NO SE PUEDE FILTRAR PORQUE SINO, BORRAMOS TODO EL CACHE AL SOBREESCRIBIRLO))
             //= retrievedArrayfi.filter(item => item.ID_visit === idVisita);

            var idVisita = @ViewBag.idvisita;
            var item;

            //Creamos un metodo diferente para recorrer los elementos ya que hay objetos child
            //los cuales no se pueden solo mandar a llamar, sino que hay que recorrerlos
            function deepSearch(container, idkey, value, text) {

                for (var i = 0; i < container.length; i++) {
                    var objeto = container[i];
                    if (objeto.ID_visit == idVisita && objeto.idkey == idkey) {
                        //Lo encontro en los parent y actualizaremos
                        item = objeto;
                        //Una vez encontrado,actualizamos lo que necesitamos y cambiamos el estado.
                        item.onserver = false;
                        item.action = "update"
                        if (value == "" || value == null) {
                            item.fsource = ""
                        } else {
                            item.fsource = value;
                        }



                        break;
                    } else { //no lo encontro pero verificaremos si tiene hijos para buscar nuevamente
                        if (objeto.children.length > 0) {
                            deepSearch(objeto.children, idkey, value, text);
                        }
                    }

                }

            }

            objects.forEach(function (element) {
                var id = element.id;
                var val = element.value;
                var txt = element.text;
                deepSearch(retrievedArrayF, id, val, txt);
            });

            localStorage.setItem('FormsM_details', JSON.stringify(retrievedArrayF));


            //Guardamos en server
            $.ajax({
                url: '/FormsM/Save_activityByitem',
                type: 'POST',
                data: { 'id': idvisita, 'objects': objects },
                cache: false,
                global: false,
                success: function (result) {

                    if (result.Result == "Success") {
                        $("#loading").hide();
                                    //Guardamos en local
            var retrievedArrayF = JSON.parse(localStorage.getItem('FormsM_details'));
            //filtramos por actividad ((NO SE PUEDE FILTRAR PORQUE SINO, BORRAMOS TODO EL CACHE AL SOBREESCRIBIRLO))
             //= retrievedArrayfi.filter(item => item.ID_visit === idVisita);

            var idVisita = @ViewBag.idvisita;
            var item;

            //Creamos un metodo diferente para recorrer los elementos ya que hay objetos child
            //los cuales no se pueden solo mandar a llamar, sino que hay que recorrerlos
            function deepSearch(container, idkey, value, text) {

                for (var i = 0; i < container.length; i++) {
                    var objeto = container[i];
                    if (objeto.ID_visit == idVisita && objeto.idkey == idkey) {
                        //Lo encontro en los parent y actualizaremos
                        item = objeto;
                            //Una vez encontrado,actualizamos lo que necesitamos y cambiamos el estado.
                            item.onserver = false;
                            item.action = "saved"

                        break;
                    } else { //no lo encontro pero verificaremos si tiene hijos para buscar nuevamente
                        if (objeto.children.length > 0) {
                            deepSearch(objeto.children, idkey, value, text);
                        }
                    }

                }

            }

            objects.forEach(function (element) {
                var id = element.id;
                var val = element.value;
                var txt = element.text;
                deepSearch(retrievedArrayF, id, val, txt);
            });

            localStorage.setItem('FormsM_details', JSON.stringify(retrievedArrayF));

                    } else {
                        $("#loading").hide();


                    }


                },
                error: function (request) {
                    $("#loading").hide();



                }
            });
        } else {
//En toda accion de guardar, primero siempre ira al localstorage como update y luego al server
            //Guardamos en local
            var retrievedArrayF = JSON.parse(localStorage.getItem('FormsM_details'));
            //filtramos por actividad ((NO SE PUEDE FILTRAR PORQUE SINO, BORRAMOS TODO EL CACHE AL SOBREESCRIBIRLO))
             //= retrievedArrayfi.filter(item => item.ID_visit === idVisita);

            var idVisita = @ViewBag.idvisita;
            var item;

            //Creamos un metodo diferente para recorrer los elementos ya que hay objetos child
            //los cuales no se pueden solo mandar a llamar, sino que hay que recorrerlos
            function deepSearch(container, idkey, value, text) {

                for (var i = 0; i < container.length; i++) {
                    var objeto = container[i];
                    if (objeto.ID_visit == idVisita && objeto.idkey == idkey) {
                        //Lo encontro en los parent y actualizaremos
                        item = objeto;
                        //Una vez encontrado,actualizamos lo que necesitamos y cambiamos el estado.
                        item.onserver = false;
                        item.action = "update"
                        if (value == "" || value == null) {
                            item.fsource = ""
                        } else {
                            item.fsource = value;
                        }



                        break;
                    } else { //no lo encontro pero verificaremos si tiene hijos para buscar nuevamente
                        if (objeto.children.length > 0) {
                            deepSearch(objeto.children, idkey, value, text);
                        }
                    }

                }

            }

            objects.forEach(function (element) {
                var id = element.id;
                var val = element.value;
                var txt = element.text;
                deepSearch(retrievedArrayF, id, val, txt);
            });

            localStorage.setItem('FormsM_details', JSON.stringify(retrievedArrayF));

        }

    });

    $(document).on('focusout', 'textarea.form-control', function () {
        $("#loading").hide();
        var idvisita = "";
        idvisita = document.getElementById('idvisita').value;
        //GUARDAMOS OBJETOS
        var objects = [];
        //alert("ID:" + $(this).attr('id') + "value: " + $(this).val());
        objects.push({
            id: $(this).attr('id'),
            value: $(this).val(),
            text: ""
        });

        if (isOnLine()) {

//En toda accion de guardar, primero siempre ira al localstorage como update y luego al server
            //Guardamos en local
            var retrievedArrayF = JSON.parse(localStorage.getItem('FormsM_details'));
            //filtramos por actividad ((NO SE PUEDE FILTRAR PORQUE SINO, BORRAMOS TODO EL CACHE AL SOBREESCRIBIRLO))
             //= retrievedArrayfi.filter(item => item.ID_visit === idVisita);

            var idVisita = @ViewBag.idvisita;
            var item;

            //Creamos un metodo diferente para recorrer los elementos ya que hay objetos child
            //los cuales no se pueden solo mandar a llamar, sino que hay que recorrerlos
            function deepSearch(container, idkey, value, text) {

                for (var i = 0; i < container.length; i++) {
                    var objeto = container[i];
                    if (objeto.ID_visit == idVisita && objeto.idkey == idkey) {
                        //Lo encontro en los parent y actualizaremos
                        item = objeto;
                        //Una vez encontrado,actualizamos lo que necesitamos y cambiamos el estado.
                        item.onserver = false;
                        item.action = "update"
                        if (value == "" || value == null) {
                            item.fsource = ""
                        } else {
                            item.fsource = value;
                        }



                        break;
                    } else { //no lo encontro pero verificaremos si tiene hijos para buscar nuevamente
                        if (objeto.children.length > 0) {
                            deepSearch(objeto.children, idkey, value, text);
                        }
                    }

                }

            }

            objects.forEach(function (element) {
                var id = element.id;
                var val = element.value;
                var txt = element.text;
                deepSearch(retrievedArrayF, id, val, txt);
            });

            localStorage.setItem('FormsM_details', JSON.stringify(retrievedArrayF));


            //Guardamos en server
            $.ajax({
                url: '/FormsM/Save_activityByitem',
                type: 'POST',
                data: { 'id': idvisita, 'objects': objects },
                cache: false,
                global: false,
                success: function (result) {

                    if (result.Result == "Success") {

            //Guardamos en local
            var retrievedArrayF = JSON.parse(localStorage.getItem('FormsM_details'));
            //filtramos por actividad ((NO SE PUEDE FILTRAR PORQUE SINO, BORRAMOS TODO EL CACHE AL SOBREESCRIBIRLO))
             //= retrievedArrayfi.filter(item => item.ID_visit === idVisita);

            var idVisita = @ViewBag.idvisita;
            var item;

            //Creamos un metodo diferente para recorrer los elementos ya que hay objetos child
            //los cuales no se pueden solo mandar a llamar, sino que hay que recorrerlos
            function deepSearch(container, idkey, value, text) {

                for (var i = 0; i < container.length; i++) {
                    var objeto = container[i];
                    if (objeto.ID_visit == idVisita && objeto.idkey == idkey) {
                        //Lo encontro en los parent y actualizaremos
                        item = objeto;
                            //Una vez encontrado,actualizamos lo que necesitamos y cambiamos el estado.
                            item.onserver = false;
                            item.action = "saved"

                        break;
                    } else { //no lo encontro pero verificaremos si tiene hijos para buscar nuevamente
                        if (objeto.children.length > 0) {
                            deepSearch(objeto.children, idkey, value, text);
                        }
                    }

                }

            }

            objects.forEach(function (element) {
                var id = element.id;
                var val = element.value;
                var txt = element.text;
                deepSearch(retrievedArrayF, id, val, txt);
            });

            localStorage.setItem('FormsM_details', JSON.stringify(retrievedArrayF));

                    } else {
                        $("#loading").hide();


                    }


                },
                error: function (request) {
                    $("#loading").hide();



                }
            });
        } else {
//En toda accion de guardar, primero siempre ira al localstorage como update y luego al server
            //Guardamos en local
            var retrievedArrayF = JSON.parse(localStorage.getItem('FormsM_details'));
            //filtramos por actividad ((NO SE PUEDE FILTRAR PORQUE SINO, BORRAMOS TODO EL CACHE AL SOBREESCRIBIRLO))
             //= retrievedArrayfi.filter(item => item.ID_visit === idVisita);

            var idVisita = @ViewBag.idvisita;
            var item;

            //Creamos un metodo diferente para recorrer los elementos ya que hay objetos child
            //los cuales no se pueden solo mandar a llamar, sino que hay que recorrerlos
            function deepSearch(container, idkey, value, text) {

                for (var i = 0; i < container.length; i++) {
                    var objeto = container[i];
                    if (objeto.ID_visit == idVisita && objeto.idkey == idkey) {
                        //Lo encontro en los parent y actualizaremos
                        item = objeto;
                        //Una vez encontrado,actualizamos lo que necesitamos y cambiamos el estado.
                        item.onserver = false;
                        item.action = "update"
                        if (value == "" || value == null) {
                            item.fsource = ""
                        } else {
                            item.fsource = value;
                        }



                        break;
                    } else { //no lo encontro pero verificaremos si tiene hijos para buscar nuevamente
                        if (objeto.children.length > 0) {
                            deepSearch(objeto.children, idkey, value, text);
                        }
                    }

                }

            }

            objects.forEach(function (element) {
                var id = element.id;
                var val = element.value;
                var txt = element.text;
                deepSearch(retrievedArrayF, id, val, txt);
            });

            localStorage.setItem('FormsM_details', JSON.stringify(retrievedArrayF));

        }
    });
    $(document).on('focusout', 'input.form-control[type = "number"]', function () {
        $("#loading").hide();
        var idvisita = "";
        idvisita = document.getElementById('idvisita').value;
        //GUARDAMOS OBJETOS
        var objects = [];
        //alert("ID:" + $(this).attr('id') + "value: " + $(this).val());

        objects.push({
            id: $(this).attr('id'),
            value: $(this).val(),
            text: ""
        });

        if ($(this).val() != "" || $(this).val() != null) {
            if ($(this).val() > 0) {
                //Agregamos la propiedad

                $(this).closest('.tr').addClass('border-success');
                $(this).closest('.tr').find('.icondiv').addClass('mdi icon-sm text-success mdi-check-all');

            } else {
                //Quitamos la propiedad

                $(this).closest('.tr').removeClass('border-success');
                $(this).closest('.tr').find('.icondiv').removeClass('mdi icon-sm text-success mdi-check-all');
            }
        } else {
            $(this).closest('.tr').removeClass('border-success');
            $(this).closest('.tr').find('.icondiv').removeClass('mdi icon-sm text-success mdi-check-all');
        }

        if (isOnLine()) {

//En toda accion de guardar, primero siempre ira al localstorage como update y luego al server
            //Guardamos en local
            var retrievedArrayF = JSON.parse(localStorage.getItem('FormsM_details'));
            //filtramos por actividad ((NO SE PUEDE FILTRAR PORQUE SINO, BORRAMOS TODO EL CACHE AL SOBREESCRIBIRLO))
             //= retrievedArrayfi.filter(item => item.ID_visit === idVisita);

            var idVisita = @ViewBag.idvisita;
            var item;

            //Creamos un metodo diferente para recorrer los elementos ya que hay objetos child
            //los cuales no se pueden solo mandar a llamar, sino que hay que recorrerlos
            function deepSearch(container, idkey, value, text) {

                for (var i = 0; i < container.length; i++) {
                    var objeto = container[i];
                    if (objeto.ID_visit == idVisita && objeto.idkey == idkey) {
                        //Lo encontro en los parent y actualizaremos
                        item = objeto;
                        //Una vez encontrado,actualizamos lo que necesitamos y cambiamos el estado.
                        item.onserver = false;
                        item.action = "update"
                        if (value == "" || value == null) {
                            item.fvalueDecimal = "0"
                        } else {
                            item.fvalueDecimal = value;
                        }


                        break;
                    } else { //no lo encontro pero verificaremos si tiene hijos para buscar nuevamente
                        if (objeto.children.length > 0) {
                            deepSearch(objeto.children, idkey, value, text);
                        }
                    }

                }

            }

            objects.forEach(function (element) {
                var id = element.id;
                var val = element.value;
                var txt = element.text;
                deepSearch(retrievedArrayF, id, val, txt);
            });

            localStorage.setItem('FormsM_details', JSON.stringify(retrievedArrayF));


            //Guardamos en server
            $.ajax({
                url: '/FormsM/Save_activityByitem',
                type: 'POST',
                data: { 'id': idvisita, 'objects': objects },
                cache: false,
                global: false,
                success: function (result) {

                    if (result.Result == "Success") {

            //Guardamos en local
            var retrievedArrayF = JSON.parse(localStorage.getItem('FormsM_details'));
            //filtramos por actividad ((NO SE PUEDE FILTRAR PORQUE SINO, BORRAMOS TODO EL CACHE AL SOBREESCRIBIRLO))
             //= retrievedArrayfi.filter(item => item.ID_visit === idVisita);

            var idVisita = @ViewBag.idvisita;
            var item;

            //Creamos un metodo diferente para recorrer los elementos ya que hay objetos child
            //los cuales no se pueden solo mandar a llamar, sino que hay que recorrerlos
            function deepSearch(container, idkey, value, text) {

                for (var i = 0; i < container.length; i++) {
                    var objeto = container[i];
                    if (objeto.ID_visit == idVisita && objeto.idkey == idkey) {
                        //Lo encontro en los parent y actualizaremos
                        item = objeto;
                            //Una vez encontrado,actualizamos lo que necesitamos y cambiamos el estado.
                            item.onserver = false;
                            item.action = "saved"

                        break;
                    } else { //no lo encontro pero verificaremos si tiene hijos para buscar nuevamente
                        if (objeto.children.length > 0) {
                            deepSearch(objeto.children, idkey, value, text);
                        }
                    }

                }

            }

            objects.forEach(function (element) {
                var id = element.id;
                var val = element.value;
                var txt = element.text;
                deepSearch(retrievedArrayF, id, val, txt);
            });

            localStorage.setItem('FormsM_details', JSON.stringify(retrievedArrayF));

                    } else {
                        $("#loading").hide();


                    }


                },
                error: function (request) {
                    $("#loading").hide();



                }
            });
        } else {
//En toda accion de guardar, primero siempre ira al localstorage como update y luego al server
            //Guardamos en local
            var retrievedArrayF = JSON.parse(localStorage.getItem('FormsM_details'));
            //filtramos por actividad ((NO SE PUEDE FILTRAR PORQUE SINO, BORRAMOS TODO EL CACHE AL SOBREESCRIBIRLO))
             //= retrievedArrayfi.filter(item => item.ID_visit === idVisita);

            var idVisita = @ViewBag.idvisita;
            var item;

            //Creamos un metodo diferente para recorrer los elementos ya que hay objetos child
            //los cuales no se pueden solo mandar a llamar, sino que hay que recorrerlos
            function deepSearch(container, idkey, value, text) {

                for (var i = 0; i < container.length; i++) {
                    var objeto = container[i];
                    if (objeto.ID_visit == idVisita && objeto.idkey == idkey) {
                        //Lo encontro en los parent y actualizaremos
                        item = objeto;
                        //Una vez encontrado,actualizamos lo que necesitamos y cambiamos el estado.
                        item.onserver = false;
                        item.action = "update"
                        if (value == "" || value == null) {
                            item.fvalueDecimal = "0"
                        } else {
                            item.fvalueDecimal = value;
                        }


                        break;
                    } else { //no lo encontro pero verificaremos si tiene hijos para buscar nuevamente
                        if (objeto.children.length > 0) {
                            deepSearch(objeto.children, idkey, value, text);
                        }
                    }

                }

            }

            objects.forEach(function (element) {
                var id = element.id;
                var val = element.value;
                var txt = element.text;
                deepSearch(retrievedArrayF, id, val, txt);
            });

            localStorage.setItem('FormsM_details', JSON.stringify(retrievedArrayF));

        }
    });

    $(document).on('focusout', 'select', function () {
        $("#loading").hide();
        var idvisita = "";
        idvisita = document.getElementById('idvisita').value;
        //GUARDAMOS OBJETOS
        var objects = [];
        //alert("ID:" + $(this).attr('id') + "value: " + $(this).val());

        //alert("ID:" + $(this).attr('id') + "value: " + $(this).val());
        var str = $(this).find('option:selected').text();
        str = str.substring(str.indexOf("-") + 1);

        var final = "";
        objects.push({
            id: $(this).attr('name'),
            value: $(this).val(),
            text: str.trim()
        });

        if (isOnLine()) {
            //En toda accion de guardar, primero siempre ira al localstorage como update y luego al server
            //Guardamos en local
            var retrievedArrayF = JSON.parse(localStorage.getItem('FormsM_details'));
            //filtramos por actividad ((NO SE PUEDE FILTRAR PORQUE SINO, BORRAMOS TODO EL CACHE AL SOBREESCRIBIRLO))
             //= retrievedArrayfi.filter(item => item.ID_visit === idVisita);

            var idVisita = @ViewBag.idvisita;
            var item;

            //Creamos un metodo diferente para recorrer los elementos ya que hay objetos child
            //los cuales no se pueden solo mandar a llamar, sino que hay que recorrerlos
            function deepSearch(container, idkey, value, text) {

                for (var i = 0; i < container.length; i++) {
                    var objeto = container[i];
                    if (objeto.ID_visit == idVisita && objeto.idkey == idkey) {
                        //Lo encontro en los parent y actualizaremos
                        item = objeto;
                        //Una vez encontrado,actualizamos lo que necesitamos y cambiamos el estado.
                        item.onserver = false;
                        item.action = "update"
                        item.fvalueText = value;
                        item.fdescription = text;


                        break;
                    } else { //no lo encontro pero verificaremos si tiene hijos para buscar nuevamente
                        if (objeto.children.length > 0) {
                            deepSearch(objeto.children, idkey, value, text);
                        }
                    }

                }

            }

            objects.forEach(function (element) {
                var id = element.id;
                var val = element.value;
                var txt = element.text;
                deepSearch(retrievedArrayF, id, val, txt);
            });

            localStorage.setItem('FormsM_details', JSON.stringify(retrievedArrayF));


            //Guardamos en server
            $.ajax({
                url: '/FormsM/Save_activityByitem',
                type: 'POST',
                data: { 'id': idvisita, 'objects': objects },
                cache: false,
                global: false,
                success: function (result) {

                    if (result.Result == "Success") {

            //Guardamos en local
            var retrievedArrayF = JSON.parse(localStorage.getItem('FormsM_details'));
            //filtramos por actividad ((NO SE PUEDE FILTRAR PORQUE SINO, BORRAMOS TODO EL CACHE AL SOBREESCRIBIRLO))
             //= retrievedArrayfi.filter(item => item.ID_visit === idVisita);

            var idVisita = @ViewBag.idvisita;
            var item;

            //Creamos un metodo diferente para recorrer los elementos ya que hay objetos child
            //los cuales no se pueden solo mandar a llamar, sino que hay que recorrerlos
            function deepSearch(container, idkey, value, text) {

                for (var i = 0; i < container.length; i++) {
                    var objeto = container[i];
                    if (objeto.ID_visit == idVisita && objeto.idkey == idkey) {
                        //Lo encontro en los parent y actualizaremos
                        item = objeto;
                            //Una vez encontrado,actualizamos lo que necesitamos y cambiamos el estado.
                            item.onserver = false;
                            item.action = "saved"

                        break;
                    } else { //no lo encontro pero verificaremos si tiene hijos para buscar nuevamente
                        if (objeto.children.length > 0) {
                            deepSearch(objeto.children, idkey, value, text);
                        }
                    }

                }

            }

            objects.forEach(function (element) {
                var id = element.id;
                var val = element.value;
                var txt = element.text;
                deepSearch(retrievedArrayF, id, val, txt);
            });

            localStorage.setItem('FormsM_details', JSON.stringify(retrievedArrayF));

                    } else {
                        $("#loading").hide();


                    }


                },
                error: function (request) {
                    $("#loading").hide();



                }
            });
        } else {

            //En toda accion de guardar, primero siempre ira al localstorage como update y luego al server
            //Guardamos en local
            var retrievedArrayF = JSON.parse(localStorage.getItem('FormsM_details'));
            //filtramos por actividad ((NO SE PUEDE FILTRAR PORQUE SINO, BORRAMOS TODO EL CACHE AL SOBREESCRIBIRLO))
             //= retrievedArrayfi.filter(item => item.ID_visit === idVisita);

            var idVisita = @ViewBag.idvisita;
            var item;

            //Creamos un metodo diferente para recorrer los elementos ya que hay objetos child
            //los cuales no se pueden solo mandar a llamar, sino que hay que recorrerlos
            function deepSearch(container, idkey, value, text) {

                for (var i = 0; i < container.length; i++) {
                    var objeto = container[i];
                    if (objeto.ID_visit == idVisita && objeto.idkey == idkey) {
                        //Lo encontro en los parent y actualizaremos
                        item = objeto;
                        //Una vez encontrado,actualizamos lo que necesitamos y cambiamos el estado.
                        item.onserver = false;
                        item.action = "update"
                        item.fvalueText = value;
                        item.fdescription = text;


                        break;
                    } else { //no lo encontro pero verificaremos si tiene hijos para buscar nuevamente
                        if (objeto.children.length > 0) {
                            deepSearch(objeto.children, idkey, value, text);
                        }
                    }

                }

            }

            objects.forEach(function (element) {
                var id = element.id;
                var val = element.value;
                var txt = element.text;
                deepSearch(retrievedArrayF, id, val, txt);
            });

            localStorage.setItem('FormsM_details', JSON.stringify(retrievedArrayF));
        }
    });

    $(document).on('click', 'input:radio', function () {
        //console.log($(this).attr('name'));
        //console.log($(this).attr('id'));


        $("#loading").hide();
        var idvisita = "";
        idvisita = document.getElementById('idvisita').value;
        //GUARDAMOS OBJETOS
        var objects = [];
        //alert("ID:" + $(this).attr('id') + "value: " + $(this).val());

        //alert("ID:" + $(this).attr('id') + "value: " + $(this).val());



        $.each($('input.form-check-input[name=' + $(this).attr('name') + ']'), function () {


            objects.push({
                id: $(this).attr('id'),
                value: $(this).prop('checked'),
                text: ""
            });
        });


        var idVisita = @ViewBag.idvisita;

        if (isOnLine()) {

            //En toda accion de guardar, primero siempre ira al localstorage como update y luego al server
            //Guardamos en local
            var retrievedArrayF = JSON.parse(localStorage.getItem('FormsM_details'));
            //filtramos por actividad ((NO SE PUEDE FILTRAR PORQUE SINO, BORRAMOS TODO EL CACHE AL SOBREESCRIBIRLO))
             //= retrievedArrayfi.filter(item => item.ID_visit === idVisita);

            var idVisita = @ViewBag.idvisita;
            var item;

            //Creamos un metodo diferente para recorrer los elementos ya que hay objetos child
            //los cuales no se pueden solo mandar a llamar, sino que hay que recorrerlos
            function deepSearch(container, idkey, value, text) {

                for (var i = 0; i < container.length; i++) {
                    var objeto = container[i];
                    if (objeto.ID_visit == idVisita && objeto.idkey == idkey) {
                        //Lo encontro en los parent y actualizaremos
                        item = objeto;
                            //Una vez encontrado,actualizamos lo que necesitamos y cambiamos el estado.
                            item.onserver = false;
                            item.action = "update"

                    if (value == "" || value == null) { value = false; }

                        if (value == false) {
                            item.fvalue = 0; //Lo guardamos como entero
                        } else {
                            item.fvalue = 1; //Lo guardamos como entero
                        }


                        break;
                    } else { //no lo encontro pero verificaremos si tiene hijos para buscar nuevamente
                        if (objeto.children.length > 0) {
                            deepSearch(objeto.children, idkey, value, text);
                        }
                    }

                }

                //getObject = null;
            }

            objects.forEach(function (element) {
                var id = element.id;
                var val = element.value;
                var txt = element.text;
                deepSearch(retrievedArrayF, id, val, txt);
            });




            //retrievedArrayF.forEach(function (objeto) {
            //    if (objeto.ID_visit == idVisita && objeto.idkey == id) {
            //                item = objeto;
            //                //Una vez encontrado,actualizamos lo que necesitamos y cambiamos el estado.
            //                item.onserver = false;
            //                item.action = "update"

            //        if (value == "" || value == null) { value = "false"; }
            //        var seleccionado = 0;
            //        if (item.value == "false") {
            //            seleccionado = 0;
            //        }
            //        else if (item.value == "true") {
            //            seleccionado = 1;
            //        }
            //        item.fvalue = seleccionado; //Lo guardamos como entero

            //    }

            //});
            localStorage.setItem('FormsM_details', JSON.stringify(retrievedArrayF));


            //Guardamos en server
            $.ajax({
                url: '/FormsM/Save_activityByitem',
                type: 'POST',
                data: { 'id': idvisita, 'objects': objects },
                cache: false,
                global: false,
                success: function (result) {

                    if (result.Result == "Success") {

            //Guardamos en local
            var retrievedArrayF = JSON.parse(localStorage.getItem('FormsM_details'));
            //filtramos por actividad ((NO SE PUEDE FILTRAR PORQUE SINO, BORRAMOS TODO EL CACHE AL SOBREESCRIBIRLO))
             //= retrievedArrayfi.filter(item => item.ID_visit === idVisita);

            var idVisita = @ViewBag.idvisita;
            var item;

            //Creamos un metodo diferente para recorrer los elementos ya que hay objetos child
            //los cuales no se pueden solo mandar a llamar, sino que hay que recorrerlos
            function deepSearch(container, idkey, value, text) {

                for (var i = 0; i < container.length; i++) {
                    var objeto = container[i];
                    if (objeto.ID_visit == idVisita && objeto.idkey == idkey) {
                        //Lo encontro en los parent y actualizaremos
                        item = objeto;
                            //Una vez encontrado,actualizamos lo que necesitamos y cambiamos el estado.
                            item.onserver = false;
                            item.action = "saved"

                        break;
                    } else { //no lo encontro pero verificaremos si tiene hijos para buscar nuevamente
                        if (objeto.children.length > 0) {
                            deepSearch(objeto.children, idkey, value, text);
                        }
                    }

                }

            }

            objects.forEach(function (element) {
                var id = element.id;
                var val = element.value;
                var txt = element.text;
                deepSearch(retrievedArrayF, id, val, txt);
            });

            localStorage.setItem('FormsM_details', JSON.stringify(retrievedArrayF));

                    } else {
                        $("#loading").hide();


                    }


                },
                error: function (request) {
                    $("#loading").hide();



                }
            });
        } else {
            //En toda accion de guardar, primero siempre ira al localstorage como update y luego al server
            //Guardamos en local
            var retrievedArrayF = JSON.parse(localStorage.getItem('FormsM_details'));
            //filtramos por actividad ((NO SE PUEDE FILTRAR PORQUE SINO, BORRAMOS TODO EL CACHE AL SOBREESCRIBIRLO))
             //= retrievedArrayfi.filter(item => item.ID_visit === idVisita);

            var idVisita = @ViewBag.idvisita;
            var item;

            //Creamos un metodo diferente para recorrer los elementos ya que hay objetos child
            //los cuales no se pueden solo mandar a llamar, sino que hay que recorrerlos
            function deepSearch(container, idkey, value, text) {

                for (var i = 0; i < container.length; i++) {
                    var objeto = container[i];
                    if (objeto.ID_visit == idVisita && objeto.idkey == idkey) {
                        //Lo encontro en los parent y actualizaremos
                        item = objeto;
                            //Una vez encontrado,actualizamos lo que necesitamos y cambiamos el estado.
                            item.onserver = false;
                            item.action = "update"

                    if (value == "" || value == null) { value = false; }

                        if (value == false) {
                            item.fvalue = 0; //Lo guardamos como entero
                        } else {
                            item.fvalue = 1; //Lo guardamos como entero
                        }


                        break;
                    } else { //no lo encontro pero verificaremos si tiene hijos para buscar nuevamente
                        if (objeto.children.length > 0) {
                            deepSearch(objeto.children, idkey, value, text);
                        }
                    }

                }

            }

            objects.forEach(function (element) {
                var id = element.id;
                var val = element.value;
                var txt = element.text;
                deepSearch(retrievedArrayF, id, val, txt);
            });

            localStorage.setItem('FormsM_details', JSON.stringify(retrievedArrayF));

        }
    });

    $(document).on('click', 'input:checkbox', function () {
        //console.log($(this).attr('name'));
        //console.log($(this).attr('id'));


        $("#loading").hide();
        var idvisita = "";
        idvisita = document.getElementById('idvisita').value;
        //GUARDAMOS OBJETOS
        var objects = [];
        //alert("ID:" + $(this).attr('id') + "value: " + $(this).val());

        //alert("ID:" + $(this).attr('id') + "value: " + $(this).val());


            objects.push({
                id: $(this).attr('id'),
                value: $(this).prop('checked'),
                text: ""
            });
    


        var idVisita = @ViewBag.idvisita;

        if (isOnLine()) {

            //En toda accion de guardar, primero siempre ira al localstorage como update y luego al server
            //Guardamos en local
            var retrievedArrayF = JSON.parse(localStorage.getItem('FormsM_details'));
            //filtramos por actividad ((NO SE PUEDE FILTRAR PORQUE SINO, BORRAMOS TODO EL CACHE AL SOBREESCRIBIRLO))
             //= retrievedArrayfi.filter(item => item.ID_visit === idVisita);

            var idVisita = @ViewBag.idvisita;
            var item;

            //Creamos un metodo diferente para recorrer los elementos ya que hay objetos child
            //los cuales no se pueden solo mandar a llamar, sino que hay que recorrerlos
            function deepSearch(container, idkey, value, text) {

                for (var i = 0; i < container.length; i++) {
                    var objeto = container[i];
                    if (objeto.ID_visit == idVisita && objeto.idkey == idkey) {
                        //Lo encontro en los parent y actualizaremos
                        item = objeto;
                            //Una vez encontrado,actualizamos lo que necesitamos y cambiamos el estado.
                            item.onserver = false;
                            item.action = "update"

                    if (value == "" || value == null) { value = false; }

                        if (value == false) {
                            item.fvalue = 0; //Lo guardamos como entero
                        } else {
                            item.fvalue = 1; //Lo guardamos como entero
                        }


                        break;
                    } else { //no lo encontro pero verificaremos si tiene hijos para buscar nuevamente
                        if (objeto.children.length > 0) {
                            deepSearch(objeto.children, idkey, value, text);
                        }
                    }

                }

                //getObject = null;
            }

            objects.forEach(function (element) {
                var id = element.id;
                var val = element.value;
                var txt = element.text;
                deepSearch(retrievedArrayF, id, val, txt);
            });




            //retrievedArrayF.forEach(function (objeto) {
            //    if (objeto.ID_visit == idVisita && objeto.idkey == id) {
            //                item = objeto;
            //                //Una vez encontrado,actualizamos lo que necesitamos y cambiamos el estado.
            //                item.onserver = false;
            //                item.action = "update"

            //        if (value == "" || value == null) { value = "false"; }
            //        var seleccionado = 0;
            //        if (item.value == "false") {
            //            seleccionado = 0;
            //        }
            //        else if (item.value == "true") {
            //            seleccionado = 1;
            //        }
            //        item.fvalue = seleccionado; //Lo guardamos como entero

            //    }

            //});
            localStorage.setItem('FormsM_details', JSON.stringify(retrievedArrayF));


            //Guardamos en server
            $.ajax({
                url: '/FormsM/Save_activityByitem',
                type: 'POST',
                data: { 'id': idvisita, 'objects': objects },
                cache: false,
                global: false,
                success: function (result) {

                    if (result.Result == "Success") {

            //Guardamos en local
            var retrievedArrayF = JSON.parse(localStorage.getItem('FormsM_details'));
            //filtramos por actividad ((NO SE PUEDE FILTRAR PORQUE SINO, BORRAMOS TODO EL CACHE AL SOBREESCRIBIRLO))
             //= retrievedArrayfi.filter(item => item.ID_visit === idVisita);

            var idVisita = @ViewBag.idvisita;
            var item;

            //Creamos un metodo diferente para recorrer los elementos ya que hay objetos child
            //los cuales no se pueden solo mandar a llamar, sino que hay que recorrerlos
            function deepSearch(container, idkey, value, text) {

                for (var i = 0; i < container.length; i++) {
                    var objeto = container[i];
                    if (objeto.ID_visit == idVisita && objeto.idkey == idkey) {
                        //Lo encontro en los parent y actualizaremos
                        item = objeto;
                            //Una vez encontrado,actualizamos lo que necesitamos y cambiamos el estado.
                            item.onserver = false;
                            item.action = "saved"

                        break;
                    } else { //no lo encontro pero verificaremos si tiene hijos para buscar nuevamente
                        if (objeto.children.length > 0) {
                            deepSearch(objeto.children, idkey, value, text);
                        }
                    }

                }

            }

            objects.forEach(function (element) {
                var id = element.id;
                var val = element.value;
                var txt = element.text;
                deepSearch(retrievedArrayF, id, val, txt);
            });

            localStorage.setItem('FormsM_details', JSON.stringify(retrievedArrayF));

                    } else {
                        $("#loading").hide();


                    }


                },
                error: function (request) {
                    $("#loading").hide();



                }
            });
        } else {
            //En toda accion de guardar, primero siempre ira al localstorage como update y luego al server
            //Guardamos en local
            var retrievedArrayF = JSON.parse(localStorage.getItem('FormsM_details'));
            //filtramos por actividad ((NO SE PUEDE FILTRAR PORQUE SINO, BORRAMOS TODO EL CACHE AL SOBREESCRIBIRLO))
             //= retrievedArrayfi.filter(item => item.ID_visit === idVisita);

            var idVisita = @ViewBag.idvisita;
            var item;

            //Creamos un metodo diferente para recorrer los elementos ya que hay objetos child
            //los cuales no se pueden solo mandar a llamar, sino que hay que recorrerlos
            function deepSearch(container, idkey, value, text) {

                for (var i = 0; i < container.length; i++) {
                    var objeto = container[i];
                    if (objeto.ID_visit == idVisita && objeto.idkey == idkey) {
                        //Lo encontro en los parent y actualizaremos
                        item = objeto;
                            //Una vez encontrado,actualizamos lo que necesitamos y cambiamos el estado.
                            item.onserver = false;
                            item.action = "update"

                    if (value == "" || value == null) { value = false; }

                        if (value == false) {
                            item.fvalue = 0; //Lo guardamos como entero
                        } else {
                            item.fvalue = 1; //Lo guardamos como entero
                        }


                        break;
                    } else { //no lo encontro pero verificaremos si tiene hijos para buscar nuevamente
                        if (objeto.children.length > 0) {
                            deepSearch(objeto.children, idkey, value, text);
                        }
                    }

                }

            }

            objects.forEach(function (element) {
                var id = element.id;
                var val = element.value;
                var txt = element.text;
                deepSearch(retrievedArrayF, id, val, txt);
            });

            localStorage.setItem('FormsM_details', JSON.stringify(retrievedArrayF));

        }
    });

</script>